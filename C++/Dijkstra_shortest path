// C++ program for Dijkstra's shortest path
// algorithm.

#include <iostream>
using namespace std;
#include <limits.h>
 
#define V 9
int minDistance(int dist[], bool sptSet[])
{
    int min = INT_MAX, min_index;
 
    for (int v = 0; v < V; v++)
        if (sptSet[v] == false && dist[v] <= min)
            min = dist[v], min_index = v;
 
    return min_index;
}
void printSolution(int dist[])
{
    cout << "Vertex \t Distance from Source" << endl;
    for (int i = 0; i < V; i++)
        cout << i << " \t\t\t\t" << dist[i] << endl;
}
void dijkstra(int graph[V][V], int src)
{
    int dist[V]; 
 
    bool sptSet[V]; 
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;
 
    dist[src] = 0;
    for (int count = 0; count < V - 1; count++) {
    
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;
 
        for (int v = 0; v < V; v++)
 
            if (!sptSet[v] && graph[u][v]
                && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }
    printSolution(dist);
}
int main()
{
    int graph[V][V] = { { 1, 0, 4, 2, 3, 9, 0, 8, 0 },
                        { 4, 5, 8, 0, 1, 0, 0, 11, 7 },
                        { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
                        { 0, 11, 0, 0, 9, 4, 0, 12, 0 },
                        { 0, 0, 2, 9, 0, 6, 0, 0, 0 },
                        { 1, 0, 4, 0, 10, 0, 2, 9, 0 },
                        { 0, 3, 0, 3, 0, 2, 0, 3, 6 },
                        { 8, 11, 13, 0, 0, 17, 1, 0, 0 },
                        { 0, 0, 3, 0, 0, 0, 6, 8, 0 } };
 
   
    dijkstra(graph, 0);
 
    return 0;
}
 
